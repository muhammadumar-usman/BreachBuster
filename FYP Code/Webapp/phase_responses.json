{
    "1": {
        "name": "Scanning and Recon",
        "responses": {
            "start": "Welcome to Scanning and Recon phase. ",
            "target_select": "What is the target of this PenTest? ",
            "help": "This is the initial phase of pentesting. <br>In this phase, information about the target web application is gathered through passive (e.g., OSINT, WHOIS, Google Dorks) and active (e.g., port scanning, network mapping, header analysis, robots.txt analysis, fuzzing etc) techniques to identify potential attack vectors. <br>Not sure what to do in this phase? You can select a target for the pentest, or get details on how to perform scanning using different tools and techniques (osint scan, nmap scan, google dorks).",
            "osint_scan": "OSINT (Open Source Intelligence) is a method of gathering information from publicly available sources, crucial for penetration testing and security assessments without direct interaction with the target. This information encompasses domain names, IP addresses, email addresses, social media profiles, and other publicly accessible data. Here are some common tools and techniques for performing OSINT scans:<br><br>1.  Google Dorking:  Use advanced search operators in Google for specific information retrieval.<br><br>MITRE ATT&CK TTP: Reconnaissance - T1046<br><br>2.  WHOIS Lookup:  Use tools like  whois  to gather domain registration details.<br><br>MITRE ATT&CK TTP: Discovery - T1046<br><br>3.  The Harvester:  Employ tools like The Harvester to gather email accounts, subdomains, and other information using search engines and public sources.<br><br>MITRE ATT&CK TTP: Discovery - T1046<br><br>4.  Recon-ng:  Utilize Recon-ng, a web reconnaissance framework, to gather information from various sources.<br><br>MITRE ATT&CK TTP: Discovery - T1046<br><br>5.  Maltego:  Use Maltego for graphical link analysis and data mining.<br><br>MITRE ATT&CK TTP: Discovery - T1046<br><br>6.  SpiderFoot:  Employ SpiderFoot for open-source intelligence automation and data gathering.<br><br>MITRE ATT&CK TTP: Discovery - T1046<br><br>7.  Shodan:  Utilize Shodan, a search engine for internet-connected devices, to find information about devices connected to the target network.<br><br>MITRE ATT&CK TTP: Discovery - T1046<br><br>8.  DNS Enumeration:  Employ tools like  dnsenum  for DNS information enumeration about the target. Conducting an OSINT scan involves utilizing these tools and techniques to collect comprehensive information about the target from public sources, aiding in vulnerability identification and further penetration testing strategies.",
            "nmap_scan": "Nmap (Network Mapper) is a powerful open-source tool used for network discovery and security auditing. It helps in identifying the devices running on a network, the services they offer, and their versions. Nmap can also detect operating system types and versions, making it a valuable tool for penetration testers to assess the security of a network.<br><br>Here are some basic commands to perform various types of Nmap scans:<br><br>1. Basic Nmap Scan:<br>nmap {target}<br>This command performs a basic scan on the specified target to determine which hosts are up and what services they are offering.<br>MITRE ATT&CK TTP: Reconnaissance - T1046<br><br>2. Aggressive Scan:<br>nmap -A {target}<br>This command performs an aggressive scan that includes OS detection, version detection, script scanning, and traceroute.<br>MITRE ATT&CK TTP: Discovery - T1087<br><br>3. Port Scan:<br>nmap -p- {target}<br>This command scans all 65535 ports on the target to find open ports.<br>MITRE ATT&CK TTP: Discovery - T1046<br><br>4. Service Version Detection:<br>nmap -sV {target}<br>This command scans the target to determine the version of the services running on open ports.<br>MITRE ATT&CK TTP: Discovery - T1046<br><br>5. Operating System Detection:<br>nmap -O {target}<br>This command attempts to determine the operating system running on the target.<br>MITRE ATT&CK TTP: Discovery - T1069<br><br>6. Script Scan:<br>nmap -sC {target}<br>This command runs a set of default scripts against the target to gather additional information.<br>MITRE ATT&CK TTP: Execution - T1064<br><br>7. Specific Port Scan:<br>nmap -p 80,443 {target}<br>This command scans the specified ports (in this case, 80 and 443) on the target.<br>MITRE ATT&CK TTP: Discovery - T1046<br><br>You can combine these options to tailor your scan to specific needs. For example, to scan all ports and detect service versions on a target, you can use:<br>nmap -p- -sV {target}<br>Here are some advanced scan commands:<br><br>1. Stealth Scan (SYN Scan):<br>nmap -sS {target}<br>This scan technique is faster and stealthier than the traditional connect scan. It sends SYN packets to the target and waits for responses.<br>MITRE ATT&CK TTP: Discovery - T1040<br><br>2. UDP Scan:<br>nmap -sU {target}<br>This command scans for open UDP ports on the target.<br>MITRE ATT&CK TTP: Discovery - T1046<br><br>3. TCP Connect Scan:<br>nmap -sT {target}<br>This command performs a full TCP connection scan and is used when SYN scan is not an option.<br>MITRE ATT&CK TTP: Discovery - T1046<br><br>4. Fragmentation Scan:<br>nmap -f {target}<br>This command splits the scan into smaller packets, which can help evade some firewall and IDS/IPS systems.<br>MITRE ATT&CK TTP: Discovery - T1040<br><br>5. Scanning with Spoofed IP:<br>nmap -D RND:10 {target}<br>This command uses decoys to mask the scan, making it harder for the target to identify the real source of the scan.<br>MITRE ATT&CK TTP: Discovery - T1046<br><br>6. Timing Options (T0 to T5):<br>nmap -T4 {target}<br>This command sets the timing template for the scan, where T4 is faster but more detectable and T0 is the slowest and stealthiest.<br>MITRE ATT&CK TTP: Defense Evasion - T1043<br><br>7. Scan with NSE Scripts:<br>nmap --script vuln {target}<br>This command uses Nmap Scripting Engine (NSE) scripts to scan for vulnerabilities on the target.<br>MITRE ATT&CK TTP: Execution - T1064<br><br>Remember to replace {target} with the IP address or hostname of the target you want to scan.",
            "robotstxt_analysis": "Analyzing the robots.txt file involves examining the directives within this file to understand what parts of a website are intended for crawling by web robots (such as search engine crawlers) and which are not. Here's how to perform this analysis along with relevant tools and techniques:<br><br>1. Manual Inspection: Manually inspect the robots.txt file by navigating to http://example.com/robots.txt in a web browser. Analyze the directives listed in the file to understand which areas of the website are allowed or disallowed for crawling by web robots.<br><br>plaintext<br>User-agent: <br>Disallow: /admin/<br>Allow: /public/<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>2. Web Crawling Tools: Utilize web crawling tools like wget or curl to retrieve and analyze the robots.txt file from the command line. These tools can help automate the process of fetching and examining the contents of the file.<br><br>bash<br>wget http://example.com/robots.txt<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>3. Web Vulnerability Scanners: Some web vulnerability scanners, such as Nikto or OWASP ZAP, include features to analyze the robots.txt file as part of their reconnaissance phase. These scanners can identify potential security risks or sensitive areas of the website disclosed in the robots.txt file.<br><br>bash<br>nikto -host http://example.com<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>4. Manual Interpretation: Interpret the directives in the robots.txt file to understand their implications. For example, the Disallow directive specifies which parts of the website are off-limits to web robots, while the Allow directive may specify exceptions to these rules.<br><br>plaintext<br>User-agent: <br>Disallow: /admin/<br>Allow: /public/<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>Analyzing the robots.txt file provides insights into which areas of a website are intended to be crawled by web robots and which are restricted. Understanding these directives can help penetration testers identify potential areas of interest or security vulnerabilities within the web application.",
            "fuzzing": "Fuzzing is a technique used to discover vulnerabilities or weaknesses in software applications by providing unexpected or invalid input to the target system. Here's how to perform fuzzing along with relevant tools and techniques:<br><br>1. Manual Fuzzing: Manually fuzzing involves providing various input values to the target application's input fields, APIs, or parameters to observe how it behaves under different conditions. This can be done using tools like curl or web browser developer tools.<br><br>bash<br>curl -X POST http://example.com/login -d 'username=<payload>&password=<payload>'<br><br><br>MITRE ATT&CK TTP: Initial Access - T1078<br><br>2. Fuzzing Frameworks: Utilize fuzzing frameworks like AFL (American Fuzzy Lop) or fuzzbuzz to automate the process of generating and delivering fuzzing payloads to the target application. These frameworks often provide features for mutation-based or generation-based fuzzing.<br><br>bash<br>afl-fuzz -i input_dir -o output_dir target_binary<br><br><br>MITRE ATT&CK TTP: Initial Access - T1078<br><br>3. Web Application Fuzzers: Use web application fuzzing tools like Burp Suite Intruder, OWASP ZAP, or wfuzz to fuzz web applications by sending a variety of payloads to input parameters, headers, or cookies.<br><br>bash<br>wfuzz -c -z file,params.txt http://example.com/page?FUZZ=1<br><br><br>MITRE ATT&CK TTP: Initial Access - T1078<br><br>4. Protocol Fuzzers: Employ protocol-specific fuzzing tools like Sulley, SPIKE, or Scapy to fuzz network protocols and services. These tools can generate and send malformed or unexpected packets to network services to identify vulnerabilities.<br><br>bash<br>sulley -f fuzz_template.txt<br><br><br>MITRE ATT&CK TTP: Initial Access - T1078<br><br>Fuzzing allows penetration testers to identify potential security flaws or vulnerabilities in target applications by systematically testing their resilience to unexpected inputs. By leveraging various fuzzing techniques and tools, testers can uncover critical issues that could be exploited by attackers for unauthorized access or data manipulation.",
            "header_analysis": "Header analysis involves examining the HTTP headers returned by a web server to gather information about the server's configuration, software, and potential security issues. Here's how to perform header analysis along with relevant tools and techniques:<br><br>1. Manual Inspection: Manually inspect HTTP headers by using web browser developer tools or command-line tools like curl or wget to fetch and display the headers of a web page.<br><br>bash<br>curl -I http://{target}<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>2. Browser Developer Tools: Use browser developer tools (available in browsers like Chrome, Firefox, and Edge) to view HTTP headers. Open the Developer Tools, navigate to the Network tab, and reload the page to see the headers for each request and response.<br><br>plaintext<br>Open Developer Tools (F12) -> Network Tab -> Reload Page<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>3. Automated Tools: Utilize automated tools like Nikto, Nmap, or OWASP ZAP to scan and analyze HTTP headers for security misconfigurations and information leakage.<br><br>bash<br>nikto -host http://{target}<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>4. Specialized Tools: Use specialized tools like httprecon or WhatWeb to analyze HTTP headers and identify web server software, version, and potential security issues.<br><br>bash<br>whatweb http://{target}<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>5. Online Services: Leverage online services like SecurityHeaders.io or Shodan to analyze the HTTP headers of a target website. These services provide detailed reports on header configurations and security recommendations.<br><br>plaintext<br>Visit https://securityheaders.io/ and enter the target URL<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>Header analysis provides valuable insights into the server's configuration and potential security weaknesses. By examining HTTP headers, penetration testers can identify issues such as missing security headers, outdated server software, and misconfigurations that could be exploited by attackers.",
            "google_dorks": "Google Dorks are specialized search operators that allow users to refine their Google search queries to find specific information, commonly used by penetration testers and security researchers to identify potential vulnerabilities and gather sensitive information about a target. Here's how Google Dorks can be used to scan a target:<br><br>1.  Finding Vulnerable Web Servers:  Using specific search operators, such as 'inurl:' or 'intitle:', one can search for web servers with known vulnerabilities, like 'inurl:/admin.php', which searches for web pages with 'admin.php' in the URL, possibly leading to insecure administrative interfaces. <br>MITRE ATT&CK TTP: Reconnaissance - T1046<br><br>2.  Locating Sensitive Information:  Google Dorks can be used to find files containing sensitive information, such as login credentials or database dumps, like 'filetype:sql password', searching for SQL database dumps containing the word 'password'. <br>MITRE ATT&CK TTP: Discovery - T1083<br><br>3.  Discovering Exposed Devices:  By using search operators like 'site:' or 'intext:', one can search for specific devices or services that may be exposed to the internet, such as 'intitle:''webcamXP 5''', which looks for webcams accessed through the webcamXP 5 software that may be publicly accessible. <br>MITRE ATT&CK TTP: Discovery - T1046<br><br>4.  Identifying Vulnerable Software Versions:  Google Dorks can locate websites running specific software versions known to be vulnerable, such as 'intitle:''index of'' 'apache/2.4.18'', which searches for Apache web servers running version 2.4.18, potentially with known vulnerabilities. <br>MITRE ATT&CK TTP: Discovery - T1046<br><br>5.  Locating Exposed Configuration Files:  Google Dorks can help in finding exposed configuration files that may contain sensitive information or provide insights into the target's infrastructure, like 'intitle:''index of'' intext:''config.yml'', searching for configuration files named 'config.yml' that may be exposed. Using Google Dorks can provide valuable insights into potential vulnerabilities and exposures of a target, but it's essential to use them responsibly, respecting privacy and legal boundaries, while organizations should regularly monitor their online presence to prevent unintentional exposure of sensitive information."
        }
    },
    "2": {
        "name": "Enumeration",
        "responses": {
            "start": "Welcome to Enumeration phase. What information would you like to gather?",
            "help": "In the Enumeration phase, detailed information about the target system and its services is collected. This includes identifying web technologies, services running on those web technologies, finding hidden directories, enumerating possible vulnerabilities or misconfigurations that could be exploited and tools (amass,burpsuite,sublist3r,wpscan,wappalyzer,whatweb).Not sure what to do in this phase? Options for this phase include selection of technology(to test), enumeration of sub-domains, enumeration of web application functions, probing directories, identifying web components, discovering web technologies, enumerating server side technologies etc. ",
	    "enum_subdomains": "Subdomain enumeration is the process of discovering subdomains associated with a target domain. This step is crucial for penetration testers to identify potential entry points and attack surfaces within the target organization's infrastructure. Here are some common methods and techniques for performing subdomain enumeration:<br><br>1.  DNS Zone Transfers:  Attempt to perform DNS zone transfers to extract a list of subdomains from authoritative DNS servers. Tools like  dig  or  nslookup  can be used for this purpose. For example:<br> dig axfr domain.com @ns1.domain.com <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>2.  Brute Force Enumeration:  Use brute force techniques to guess subdomain names by enumerating through a list of common subdomains or generating permutations of domain names. Tools like  Sublist3r ,  Amass , or  dnsenum  can automate this process. For example:<br> sublist3r -d domain.com <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>3.  Search Engines:  Utilize search engines like Google, Bing, or Shodan to search for indexed subdomains associated with the target domain. Use advanced search operators like  site:  to narrow down the search results. For example:<br> site:domain.com <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>4.  Certificate Transparency Logs:  Monitor Certificate Transparency (CT) logs to discover subdomains associated with SSL/TLS certificates issued for the target domain. Tools like  CertSpotter  or  crt.sh  can be used to search CT logs. For example:<br> crtsh domain.com <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>5.  Web Scraping:  Scrape web pages associated with the target domain to extract links pointing to subdomains. Tools like  Scrapy  or  Burp Suite  can be used for web scraping. For example, using Burp Suite's Spider feature to crawl the target domain:<br> burpsuite --proxy <proxy_address> <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>Performing subdomain enumeration allows penetration testers to gather comprehensive information about the target organization's infrastructure, helping them identify potential attack vectors and weaknesses that can be exploited during security assessments.",
	    "identify_web_components": "Identifying web components involves discovering various components and technologies used in web applications, such as web servers, frameworks, CMS platforms, and plugins. This step is crucial for penetration testers to understand the underlying technology stack of the target application and identify potential vulnerabilities and attack vectors. Here are some common methods and techniques for identifying web components:<br><br>1.  Banner Grabbing:  Extract version information from HTTP response headers to identify the web server software and its version. Tools like  curl  or  wget  can be used to retrieve HTTP headers. For example:<br> curl -I http://example.com <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>2.  Web Server Fingerprinting:  Use specialized tools like  httprint ,  WhatWeb , or  Nmap  with HTTP fingerprinting scripts to identify web server software and its version based on observed behaviors and responses. For example:<br> nmap -sV --script=http-favicon <target> <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>3.  Content Management System (CMS) Identification:  Look for specific patterns or files associated with popular CMS platforms like WordPress, Joomla, or Drupal. Tools like  wpscan  or  joomscan  can automate CMS identification by scanning for known CMS-specific files and directories. For example:<br> wpscan --url http://example.com <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>4.  JavaScript Library Detection:  Analyze JavaScript files included in web pages to identify JavaScript libraries and frameworks used in the application. Tools like  Wappalyzer  or  Burp Suite  can identify JavaScript libraries by inspecting HTTP responses or browser traffic. For example, using Wappalyzer browser extension to detect JavaScript libraries:<br> Install Wappalyzer browser extension and browse to the target website <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>5.  Plugin Enumeration:  Identify plugins, extensions, or third-party components used in web applications by analyzing HTML source code, JavaScript files, or HTTP responses. Look for specific patterns or URLs associated with common plugins. For example, searching for WordPress plugins:<br> site:example.com/wp-content/plugins <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>6.  WhatWeb:  Use WhatWeb to identify web technologies by analyzing HTTP headers, HTML, JavaScript, CSS, and robots.txt files. WhatWeb can provide detailed information about web server software, CMS platforms, frameworks, and plugins used in the target application.<br>For example:<br> whatweb http://example.com <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>Performing web component identification allows penetration testers to gather insights into the technology stack and architecture of the target application, enabling them to tailor their testing approach and identify potential security issues and vulnerabilities effectively.",
            "probe_directory_and_files": "Probing for directories and files involves searching for hidden or sensitive directories and files within web applications or web servers. This step is crucial for penetration testers to discover potential entry points and vulnerabilities that may exist in the target application's file system. Here are some common methods and techniques for probing directories and files:<br><br>1.  Directory Brute Forcing:  Use brute force techniques to guess directory and file names by enumerating through a list of common directory and file names. Tools like  dirb ,  dirsearch , or  wfuzz  can automate directory brute forcing by sending HTTP requests to the target server and analyzing the responses. For example:<br> dirb http://example.com/ -X .txt,.php -o dirb_output.txt <br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>2.  Directory Traversal:  Attempt to traverse directories and access sensitive files by manipulating directory traversal parameters in web application URLs. Tools like  dotdotpwn  or  Burp Suite  can automate directory traversal attacks by sending crafted HTTP requests and analyzing the responses. For example:<br> dotdotpwn -m http -h example.com -M /path/to/dotdotpwn/dotdotpwn.txt <br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>3.  Web Spidering:  Use web spidering tools to crawl web pages and discover links pointing to hidden or sensitive directories and files. Tools like  Burp Suite ,  Gobuster , or  SpiderFoot  can crawl web pages and analyze HTML content to identify potential directories and files. For example, using Burp Suite's Spider feature to crawl the target website:<br> burpsuite --proxy <proxy_address> <br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>4.  File Extension Bruteforcing:  Enumerate through common file extensions to identify potentially sensitive files that may be present on the target server. Tools like  dirb ,  gobuster , or  wfuzz  can be configured to test different file extensions. For example:<br> gobuster dir -u http://example.com/ -w common.txt -x .php,.txt,.html <br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>5.  Robots.txt Analysis:  Analyze the  robots.txt  file to identify disallowed directories and files that may contain sensitive information. Manually inspecting the  robots.txt  file or using tools like  dirb  or  dirsearch  can reveal hidden directories and files. For example:<br> dirb http://example.com/ -X .txt,.php -o dirb_output.txt <br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>Probing for directories and files allows penetration testers to identify hidden or sensitive areas within web applications or web servers, enabling them to assess the security posture of the target environment and identify potential vulnerabilities that may be exploited during security assessments.",
	    "enum_webapp_func": "Enumerating web application functions involves identifying the functionalities and features implemented within a web application. This step is crucial for penetration testers to understand the attack surface and potential vulnerabilities of the target application. Here are some common methods and techniques for enumerating web application functions:<br><br>1.  Manual Exploration:  Manually explore the web application by navigating through different pages, forms, and functionalities. Take note of any user inputs, buttons, links, or actions available within the application.<br><br>MITRE ATT&CK TTP: Discovery - T1538<br><br>2.  Spidering:  Use web crawling tools like  Burp Suite ,  OWASP ZAP , or  Wget  to systematically crawl the web application and discover all accessible pages and endpoints. These tools can generate a map of the application's structure and identify hidden or unlinked pages.<br>For example, using Burp Suite's Spider feature:<br> Launch Burp Suite, configure the target scope, and start the Spider tool to crawl the web application <br><br>MITRE ATT&CK TTP: Discovery - T1538<br><br>3.  Fuzzing:  Use fuzzing techniques to send unexpected or malformed inputs to different parameters, forms, or APIs of the web application. Tools like  wfuzz ,  Burp Suite Intruder , or  OWASP ZAP  can automate this process by sending a variety of payloads and analyzing the application's responses for anomalies or unexpected behaviors.<br>For example, using wfuzz to fuzz parameters:<br> wfuzz -c -z file,params.txt http://example.com/page?FUZZ=1 <br><br>MITRE ATT&CK TTP: Discovery - T1538<br><br>4.  API Discovery:  Identify and enumerate APIs exposed by the web application. Use tools like  Swagger UI ,  Postman , or  Burp Suite  to explore API endpoints, methods, and parameters. Look for API documentation or interactive API consoles provided by the application.<br>For example, using Postman to explore APIs:<br> Import the API collection into Postman and explore available endpoints and parameters <br><br>MITRE ATT&CK TTP: Discovery - T1538<br><br>5.  Source Code Analysis:  Analyze the source code of the web application, including HTML, JavaScript, CSS, and server-side scripts, to identify hidden functionalities, commented-out code, or debug endpoints. Use text editors, IDEs, or specialized tools like  grep  or  grepcode  to search for specific patterns or keywords.<br>For example, searching for debug endpoints in source code:<br> grep -r 'debug' /path/to/source/code <br><br>MITRE ATT&CK TTP: Discovery - T1538<br><br>Enumerating web application functions allows penetration testers to gain insights into the application's behavior, functionalities, and potential attack vectors. It helps in identifying security weaknesses, misconfigurations, or vulnerabilities that could be exploited during security assessments.",
 	    "discover_web_tech": "Discovering web technologies involves identifying the technologies, frameworks, and components used in a web application's stack. This information is crucial for penetration testers to understand the potential attack surface and vulnerabilities of the target application. Here are some common methods and techniques for discovering web technologies:<br><br>1.  HTTP Headers Analysis:  Analyze the HTTP response headers returned by the web server to identify the technologies used. Look for specific headers that reveal information about the web server, programming language, frameworks, and CMS platforms. Tools like  curl  or  wget  can be used to retrieve HTTP headers. For example:<br> curl -I http://example.com <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>2.  Web Server Fingerprinting:  Use specialized tools like  Nmap  with HTTP fingerprinting scripts,  WhatWeb , or  httprint  to identify web server software and its version based on observed behaviors and responses. These tools analyze HTTP responses to detect unique characteristics of web servers. For example:<br> nmap -sV --script=http-favicon <target> <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>3.  Content Management System (CMS) Identification:  Look for specific patterns or files associated with popular CMS platforms like WordPress, Joomla, or Drupal. Tools like  wpscan  or  joomscan  can automate CMS identification by scanning for known CMS-specific files and directories. For example:<br> wpscan --url http://example.com <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>4.  JavaScript Library Detection:  Analyze JavaScript files included in web pages to identify JavaScript libraries and frameworks used in the application. Tools like  Wappalyzer  or  Burp Suite  can identify JavaScript libraries by inspecting HTTP responses or browser traffic. For example, using Wappalyzer browser extension to detect JavaScript libraries:<br> Install Wappalyzer browser extension and browse to the target website <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>5.  Plugin Enumeration:  Identify plugins, extensions, or third-party components used in web applications by analyzing HTML source code, JavaScript files, or HTTP responses. Look for specific patterns or URLs associated with common plugins. For example, searching for WordPress plugins:<br> site:example.com/wp-content/plugins <br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>Discovering web technologies provides valuable insights into the technology stack and architecture of the target application, enabling penetration testers to tailor their testing approach and identify potential security issues and vulnerabilities effectively.",
    	    "server_side_enum": "Server-side enumeration involves identifying and gathering information about the server-side components and configurations of a web application. This step is essential for penetration testers to understand the server environment and potential vulnerabilities that may exist. Here are some common methods and techniques for performing server-side enumeration:<br><br>1.  HTTP Headers Analysis:  Analyze the HTTP response headers returned by the web server to gather information about the server software, version, and other server-side configurations. Tools like  curl  or  wget  can be used to retrieve HTTP headers. For example:<br> curl -I http://example.com <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>2.  Directory and File Enumeration:  Use directory and file enumeration techniques to discover hidden directories, files, and resources on the server. Tools like  DirBuster ,  Gobuster , or  wfuzz  can be employed to brute-force directory and file paths. For example:<br> gobuster dir -u http://example.com -w /path/to/wordlist.txt <br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>3.  Service Enumeration:  Identify and enumerate server-side services and daemons running on the server. Tools like  nmap  or  netcat  can be used to scan for open ports and detect running services. For example:<br> nmap -p- -sV <target> <br><br>MITRE ATT&CK TTP: Discovery - T1046<br><br>4.  Server-Side Script Analysis:  Analyze server-side scripts and technologies used in the application backend, such as PHP, ASP.NET, or Python. Look for source code disclosures, debug endpoints, or misconfigurations that may reveal sensitive information. For example, searching for PHP files:<br> find /var/www/html -name '.php'<br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>5.  Database Enumeration:  Identify and enumerate databases used by the web application backend. Look for default database administration interfaces or misconfigurations that may expose sensitive database information. Tools like  SQLMap  or manual SQL queries can be used for database enumeration. For example:<br> sqlmap -u http://example.com/login.php --dbs <br><br>MITRE ATT&CK TTP: Discovery - T1087<br><br>Server-side enumeration provides insights into the server environment and backend configurations, allowing penetration testers to identify potential vulnerabilities and attack vectors. By understanding the server-side components, testers can tailor their testing approach and effectively assess the security posture of the web application.",
	    "select_technology": "Using dicussed tools and techniques, what CVEs, products or web technology have you identified, that would you like to test?",
	    "amass": "Amass is a powerful open-source tool designed for in-depth network mapping and external asset discovery using open-source information gathering and active reconnaissance techniques. Here's how to use Amass, its functions, and the commands to perform these functions:<br><br>1. Installation: Install Amass using go get, apt-get, or download the precompiled binaries from the GitHub repository.<br><br>bash<br>go get -u github.com/OWASP/Amass/v3/...<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>2. Basic Subdomain Enumeration: Perform a basic subdomain enumeration using Amass to discover subdomains of a given domain.<br><br>bash<br>amass enum -d {target}<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>3. Active Enumeration: Combine passive and active techniques for a more comprehensive enumeration, which includes active probing of discovered subdomains.<br><br>bash<br>amass enum -active -d {target}<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>4. Brute Forcing Subdomains: Use a brute force method to discover subdomains by providing a wordlist.<br><br>bash<br>amass enum -brute -d {target} -w /path/to/wordlist.txt<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>5. Reverse DNS Sweeping: Perform reverse DNS sweeping to find additional domains or subdomains that are related to the target.<br><br>bash<br>amass enum -d {target} -r<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>6. DNS Query Logs: Use Amass to query DNS logs to find historical DNS records, which can help in understanding the target's historical footprint.<br><br>bash<br>amass enum -d {target} -log {logfile}<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>7. Graphical Output: Generate a graphical representation of the discovered data using the DOT format, which can be useful for visualizing the relationships between discovered subdomains and IP addresses.<br><br>bash<br>amass viz -d {target} -dot<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>8. Performing Reconnaissance on Multiple Domains: You can enumerate multiple domains in one command.<br><br>bash<br>amass enum -df /path/to/domains.txt<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>9. Using Specific Data Sources: Configure Amass to use specific data sources for enumeration.<br><br>bash<br>amass enum -d {target} --source=bing,crtsh<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>10. Saving Results: Save the output of the enumeration to a file for later analysis.<br><br>bash<br>amass enum -d {target} -o /path/to/output.txt<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>Amass offers comprehensive functionality for discovering external assets, mapping networks, and performing deep reconnaissance. By utilizing its various commands and options, penetration testers can gather detailed information about the target's infrastructure, identify potential vulnerabilities, and better understand the target's attack surface.",
	    "sublist3r": "Sublist3r is a popular open-source tool designed for fast subdomain enumeration, leveraging various search engines and other sources to gather subdomains for a target domain. Here's how to use Sublist3r, its functions, and the commands to perform these functions:<br><br>1. Installation: Install Sublist3r using pip or clone it from the GitHub repository.<br><br>bash<br>pip install sublist3r<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>2. Basic Subdomain Enumeration: Perform a basic subdomain enumeration using Sublist3r to discover subdomains of a given domain.<br><br>bash<br>sublist3r -d {target}<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>3. Saving Results to a File: Save the results of the subdomain enumeration to a text file for later analysis.<br><br>bash<br>sublist3r -d {target} -o subdomains.txt<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>4. Using Specific Search Engines: Use specific search engines for subdomain enumeration by specifying them in the command. Sublist3r supports search engines like Google, Bing, Yahoo, and others.<br><br>bash<br>sublist3r -d {target} -e Bing<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>5. Brute Force Subdomains: Enable brute-forcing of subdomains using a specified wordlist to find additional subdomains that might not be indexed by search engines.<br><br>bash<br>sublist3r -d {target} -b -w /path/to/wordlist.txt<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>6. Verbose Mode: Enable verbose mode to get more detailed output during the subdomain enumeration process, providing insights into the progress and sources being used.<br><br>bash<br>sublist3r -d {target} -v<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>Sublist3r is an effective tool for quickly enumerating subdomains of a target domain, leveraging multiple search engines and other sources to gather comprehensive results. By utilizing its various options and commands, penetration testers can gather valuable information about the target's subdomain infrastructure, which is crucial for identifying potential attack vectors and understanding the target's external footprint.",
	    "burpsuite": "Burp Suite is a comprehensive cybersecurity testing platform used for web application security testing, including penetration testing, vulnerability assessment, and security research. Here's an overview of how to use Burp Suite, its functions, and the commands for performing these functions:<br><br>1. Installation: Burp Suite can be downloaded and installed from the PortSwigger website. Once installed, launch Burp Suite from the application menu or terminal.<br><br>MITRE ATT&CK TTP: Exploitation - T1200<br><br>2. Proxy Mode: Burp Suite acts as an intercepting proxy, allowing you to intercept and modify HTTP/S requests and responses between your browser and the target web application. Enable Intercept mode in the Proxy tab to intercept requests.<br><br>plaintext<br>Proxy -> Intercept -> Intercept is On<br><br><br>MITRE ATT&CK TTP: Credential Access - T1116<br><br>3. Spidering: Use Burp Spider to automatically crawl and discover the structure of the target web application, identifying all accessible pages and parameters.<br><br>plaintext<br>Target -> Site map -> Right-click on target -> Spider this host<br><br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>4. Active Scanning: Burp Scanner performs automated security scans to identify common vulnerabilities such as SQL injection, XSS, CSRF, and more.<br><br>plaintext<br>Scanner -> New Scan -> Select scan type and target -> Start Scan<br><br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>5. Repeater: Use the Repeater tool to manually manipulate and resend individual HTTP requests, allowing for precise testing and validation of vulnerabilities.<br><br>plaintext<br>Repeater -> Paste request -> Modify parameters -> Send<br><br><br>MITRE ATT&CK TTP: Execution - T1107<br><br>6. Intruder: Burp Intruder automates customizable attacks against web applications, such as brute force, fuzzing, and parameter manipulation.<br><br>plaintext<br>Intruder -> Load request -> Configure attack type -> Start attack<br><br><br>MITRE ATT&CK TTP: Credential Access - T1110<br><br>7. Decoder: Use the Decoder tool to encode/decode data, hash algorithms, and perform various transformations on data.<br><br>plaintext<br>Decoder -> Select transformation -> Input data -> Perform transformation<br><br><br>MITRE ATT&CK TTP: Discovery - T1083<br><br>8. Comparer: Compare two HTTP/S requests or responses to identify differences, such as parameter values, headers, or cookies.<br><br>plaintext<br>Comparer -> Load two items -> Compare<br><br><br>MITRE ATT&CK TTP: Collection - T1115<br><br>Burp Suite provides a wide range of features and tools to assist in all phases of web application security testing, from initial reconnaissance to vulnerability exploitation and validation. By mastering its various functions and commands, cybersecurity professionals can effectively assess the security posture of web applications and identify potential security vulnerabilities.",
	    "wpscan": "WPScan is a powerful open-source WordPress security scanner that's vital for vulnerability assessment and penetration testing of WordPress websites. To use WPScan, first, ensure it's installed via RubyGems. Once installed, you can utilize its functionalities through the command line. Enumerate WordPress users, plugins, and themes with commands like --url {target} --enumerate u, --url {target} --enumerate p, and --url {target} --enumerate t, respectively. To scan for vulnerabilities in WordPress core, plugins, and themes, use the --url {target} --enumerate vt command. WPScan also facilitates brute-forcing usernames and passwords, achieved through the --url {target} --wordlist /path/to/wordlist.txt --username {username} command. Utilize the WPScan API for automated scanning and integration with other tools by passing the --url {target} --api-token {api-token} command. Lastly, log output to a file for analysis using the --url {target} --output /path/to/output.txt command. WPScan enhances the security posture of WordPress websites by identifying vulnerabilities and misconfigurations, essential for safeguarding against cyber threats.",
	    "wappalyzer": "Wappalyzer is a versatile tool designed to identify the technologies utilized by websites, available both as a browser extension and a command-line interface. To employ Wappalyzer from the command line, begin by installing it via npm. Subsequently, execute the tool followed by the URL of the website you wish to analyze. By default, Wappalyzer outputs detected technologies in JSON format, providing a structured breakdown of the website's tech stack. Users can opt for a more readable format by utilizing the -p flag for pretty-printing or customize the output format using -f. Additionally, specific technologies can be excluded from the analysis using the -i flag. Enabling verbose mode with -v offers more detailed insights during the analysis process. Leveraging Wappalyzer's capabilities aids security professionals in reconnaissance and vulnerability assessment, empowering them to understand a website's technology landscape and pinpoint potential security risks effectively.",
	    "whatweb": "WhatWeb serves as a crucial tool for website fingerprinting, thoroughly analyzing HTTP headers and HTML code to identify the technologies underpinning a website. Installation can be accomplished through RubyGems or directly from the GitHub repository. Initiating a basic fingerprinting involves invoking 'whatweb' followed by the target website's URL, such as 'whatweb {target}'. This initial step aligns with MITRE ATT&CK TTP: Discovery - T1082. For more nuanced analyses, users can specify particular technologies or software using the '--plugins' flag. Additionally, aggressive fingerprinting, enabled via the '-a 3' flag, provides deeper insights. Results can be saved for further review by appending ' > output.txt' to the command. Custom plugins further enhance WhatWeb's functionality, allowing tailored analyses of specific technologies or behaviors. User-Agent spoofing, accessible through the '-U' flag, offers versatility in assessments. Advanced users can employ additional features, such as specifying concurrent connections with '-t' or adjusting the timeout period with '-T', to tailor the scanning process. Such meticulous scrutiny facilitates a comprehensive understanding of a website's technological landscape, essential for reconnaissance and vulnerability assessment, thus aligning with MITRE ATT&CK TTP: Discovery - T1082.",
	    "end": "Exiting Enumeration phase. Proceed to Exploitation phase."
        }
    },
    "3": {
        "name": "Exploitation",
        "responses": {
            "start": "Welcome to Exploitation phase. How would you like to proceed with exploitation?",
            "help": "Once vulnerabilities are identified, this phase involves actively exploiting them to gain unauthorized access or perform specific actions on the web application. Exploitation could involve using known exploits, custom scripts, or social engineering techniques. Not sure what to do in this phase? Options for this phase include displaying exploits selected vulnerability, printing details for these exploits, post exploit activities (such as credential dumping,lateral movement, persistence, data exfiltration, covering tracks etc). ",
	    "show_exploits": "Here are the exploits : ",
	    "privilege_escalation": "Privilege escalation is the process of gaining elevated access to resources that are normally protected from an application or user. This step is critical for penetration testers to gain full control over the compromised system, allowing for further exploitation and data access. Here are some common methods and techniques for performing privilege escalation:<br><br>1.  Exploiting Vulnerabilities:  Utilize known vulnerabilities in the operating system or installed applications to gain higher privileges. Examples include kernel exploits or software bugs.<br><br>MITRE ATT&CK TTP: Privilege Escalation - T1068<br><br>2.  Password Cracking:  Use tools like  John the Ripper  or  Hashcat  to crack password hashes and obtain credentials with higher privileges.<br><br>MITRE ATT&CK TTP: Credential Access - T1003<br><br>3.  Misconfigured Permissions:  Identify and exploit files or directories with improper permissions that allow elevation of privileges. For example, writable /etc/passwd file in Linux.<br><br>MITRE ATT&CK TTP: Privilege Escalation - T1069<br><br>4.  Exploiting Sudo Rights:  If a user has  sudo  rights, misuse them to execute commands with elevated privileges. Use  sudo -l  to list sudo privileges and identify misconfigurations.<br><br>MITRE ATT&CK TTP: Privilege Escalation - T1169<br><br>5.  DLL Injection:  Inject a malicious DLL into a process running with higher privileges, typically used on Windows systems.<br><br>MITRE ATT&CK TTP: Privilege Escalation - T1055<br><br>6.  Abusing Scheduled Tasks:  Create or modify scheduled tasks to execute malicious code with elevated privileges.<br><br>MITRE ATT&CK TTP: Privilege Escalation - T1053<br><br>7.  Using Exploit Frameworks:  Tools like Metasploit provide modules to perform privilege escalation automatically by exploiting known vulnerabilities and misconfigurations.<br><br>MITRE ATT&CK TTP: Privilege Escalation - T1068<br><br>8.  Kerberoasting:  Extract and crack service account tickets to gain higher privileges in Windows Active Directory environments.<br><br>MITRE ATT&CK TTP: Credential Access - T1208<br><br>Performing privilege escalation involves using these methods to systematically exploit vulnerabilities and misconfigurations to gain higher-level access, thereby expanding the tester's control and capabilities within the compromised environment.",
	    "post_exploit": "Post-exploitation tasks are crucial steps taken after gaining access to a target system, aiming to maintain control, gather further information, and exploit the compromised environment to achieve the penetration test objectives. These tasks include privilege escalation, data exfiltration, lateral movement, and persistence. Here are some common post-exploitation tasks and techniques:<br><br>1.  Privilege Escalation:  Elevate privileges to gain higher-level access on the compromised system, often using known exploits or misconfigurations.<br><br>MITRE ATT&CK TTP: Privilege Escalation - T1068<br><br>2.  Credential Dumping:  Extract password hashes or cleartext passwords from the system to facilitate further access.<br><br>MITRE ATT&CK TTP: Credential Dumping - T1003<br><br>3.  Lateral Movement:  Move laterally within the network to compromise additional systems and expand access.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1021<br><br>4.  Persistence:  Establish mechanisms to maintain access to the compromised system even after reboots or other interruptions.<br><br>MITRE ATT&CK TTP: Persistence - T1053<br><br>5.  Data Exfiltration:  Transfer sensitive data from the target environment to an external location.<br><br>MITRE ATT&CK TTP: Exfiltration - T1041<br><br>6.  Gathering Additional Information:  Collect more data about the target environment, such as system configurations, network architecture, and user activity.<br><br>MITRE ATT&CK TTP: Discovery - T1082<br><br>7.  Establishing Backdoors:  Install backdoors or other means to regain access if initial access is lost.<br><br>MITRE ATT&CK TTP: Persistence - T1059<br><br>8.  Covering Tracks:  Erase logs and other evidence to avoid detection and maintain stealth.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070<br><br>9.  Command and Control (C2):  Set up channels to communicate with the compromised system and control it remotely.<br><br>MITRE ATT&CK TTP: Command and Control - T1105<br><br>Conducting post-exploitation tasks involves leveraging these techniques to deepen the compromise, achieve the testing objectives, and ensure continued access, while evading detection and mitigating risks of discovery.",
	    "credential_dumping": "Credential dumping is the process of extracting account credentials, such as password hashes or plaintext passwords, from a compromised system. This step is crucial for penetration testers to gain further access to other systems or escalate privileges within the network. Here are some common methods and techniques for performing credential dumping:<br><br>1.  Dumping SAM Database:  On Windows systems, use tools like  Mimikatz  or  secretsdump.py  to dump the Security Account Manager (SAM) database, which stores user password hashes.<br><br>MITRE ATT&CK TTP: Credential Dumping - T1003.002<br><br>2.  LSASS Memory Dump:  Extract credentials from the Local Security Authority Subsystem Service (LSASS) process memory using tools like  Mimikatz ,  ProcDump , or  Task Manager  to create a memory dump for offline analysis.<br><br>MITRE ATT&CK TTP: Credential Dumping - T1003.001<br><br>3.  NTDS.dit Extraction:  In Active Directory environments, use tools like  NTDSUtil  or  secretsdump.py  to extract the NTDS.dit file, which contains all AD user credentials.<br><br>MITRE ATT&CK TTP: Credential Dumping - T1003.003<br><br>4.  Credential Manager:  Use  Mimikatz  or other similar tools to extract saved credentials from Windows Credential Manager.<br><br>MITRE ATT&CK TTP: Credential Dumping - T1555.004<br><br>5.  Registry Hive Extraction:  Extract credentials stored in Windows registry hives, such as SYSTEM and SAM, using tools like  reg.exe  or  secretsdump.py .<br><br>MITRE ATT&CK TTP: Credential Dumping - T1003.002<br><br>6.  Keychain Extraction:  On macOS, dump credentials from the Apple Keychain using tools like  Chainbreaker  or  security  command-line tool.<br><br>MITRE ATT&CK TTP: Credential Dumping - T1555.001<br><br>7.  Database Extraction:  For applications storing credentials in databases, use SQL queries or database dumping tools to extract user credentials. For example, extracting credentials from MySQL using  SELECT user, password FROM mysql.user; .<br><br>MITRE ATT&CK TTP: Credential Dumping - T1555.003<br><br>8.  Browser Credential Extraction:  Use tools like  Mimikatz ,  BrowserPassView , or custom scripts to extract saved credentials from web browsers like Chrome, Firefox, and Edge.<br><br>MITRE ATT&CK TTP: Credential Dumping - T1555.003<br><br>Performing credential dumping involves using these methods and tools to systematically extract and analyze credentials from the compromised system, enabling further exploitation and access within the target network.",
	    "lateral_movement": "Lateral movement refers to the techniques used by attackers to move through a network after gaining initial access, aiming to discover and compromise additional systems to gain higher privileges and access sensitive data. Here are some common methods and techniques for performing lateral movement:<br><br>1.  Pass-the-Hash:  Use hashed credentials to authenticate to other systems without needing to crack the hashes. Tools like  Mimikatz  can extract NTLM hashes, which can then be used with tools like  PsExec  to move laterally.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1550.002<br><br>2.  Pass-the-Ticket:  Use Kerberos tickets extracted from a compromised system to authenticate to other systems within the network.  Mimikatz  can extract these tickets for reuse.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1550.003<br><br>3.  Remote Desktop Protocol (RDP):  Utilize RDP to connect to other systems within the network. If RDP is enabled and credentials are obtained, use tools like  rdesktop  or the built-in Windows RDP client.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1021.001<br><br>4.  Windows Admin Shares:  Use administrative shares (e.g., C$, ADMIN$) to copy tools or malware to remote systems and execute them. Tools like  PsExec  or  WMIC  can facilitate this.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1021.002<br><br>5.  Windows Management Instrumentation (WMI):  Utilize WMI to execute commands or scripts on remote systems. WMI can be leveraged using  wmic.exe  or PowerShell.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1047<br><br>6.  PowerShell Remoting:  Use PowerShell Remoting to execute commands on remote systems. This requires appropriate credentials and can be done using  Enter-PSSession  or  Invoke-Command .<br><br>MITRE ATT&CK TTP: Lateral Movement - T1021.006<br><br>7.  SSH (Secure Shell):  For Unix-based systems, use SSH to move laterally if SSH keys or credentials are obtained. Tools like  ssh  or  scp  facilitate this movement.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1021.004<br><br>8.  Exploitation of Remote Services:  Exploit vulnerabilities in remote services to gain access to other systems. This can include exploiting SMB, RDP, or other network services.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1210<br><br>9.  Remote Services:  Use legitimate remote services, such as Remote Desktop, SMB, or VPN, to move within the network once credentials are compromised.<br><br>MITRE ATT&CK TTP: Lateral Movement - T1021<br><br>Performing lateral movement involves using these methods to navigate through the network, leveraging compromised credentials and vulnerabilities to expand access and control over additional systems within the target environment.",
	    "persistence": "Persistence involves techniques used by attackers to maintain access to a compromised system across system reboots or other interruptions. This enables attackers to ensure continued control over the compromised environment and facilitates further malicious activities. Here are some common methods and techniques for achieving persistence:<br><br>1.  Registry Run Keys:  Modify registry keys that control which programs are launched automatically when the system boots or a user logs in. Common keys include  HKEY_LOCAL_MACHINE/Software/Microsoft/Windows/CurrentVersion/Run'  for system-wide persistence and  'HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Run'  for user-specific persistence.<br><br>MITRE ATT&CK TTP: Persistence - T1060.001<br><br>2.  Startup Programs:  Add malicious executables or scripts to startup folders or system startup configurations to ensure they are executed each time the system boots.<br><br>MITRE ATT&CK TTP: Persistence - T1060.003<br><br>3.  Scheduled Tasks:  Create scheduled tasks that execute malicious commands or scripts at predefined intervals or system events, such as system startup or user logon.<br><br>MITRE ATT&CK TTP: Persistence - T1053.005<br><br>4.  Service Installation:  Install a malicious service that runs in the background and starts automatically with the system. This can be achieved using tools like  sc.exe  or by modifying service configuration settings.<br><br>MITRE ATT&CK TTP: Persistence - T1543.003<br><br>5.  DLL Search Order Hijacking:  Place a malicious DLL in a directory that is searched by a legitimate application or service. When the application or service is launched, it loads the malicious DLL, providing persistence.<br><br>MITRE ATT&CK TTP: Persistence - T1574.001<br><br>6.  AppInit DLLs:  Modify the AppInit_DLLs registry value to load a malicious DLL into every process that loads User32.dll. This allows the attacker to gain persistence by injecting code into newly created processes.<br><br>MITRE ATT&CK TTP: Persistence - T1547.001<br><br>7.  Shortcut Modification:  Create malicious shortcuts (.lnk files) in commonly accessed directories or on the desktop that execute malicious commands or scripts when opened.<br><br>MITRE ATT&CK TTP: Persistence - T1547.009<br><br>8.  Alternate Data Streams:  Hide malicious payloads in Alternate Data Streams (ADS) attached to legitimate files. These payloads are executed when the legitimate file is accessed.<br><br>MITRE ATT&CK TTP: Persistence - T1096.002<br><br>Performing persistence techniques allows attackers to maintain long-term access to compromised systems, enabling them to continue their malicious activities undetected and ensuring their presence within the target environment.",
	    "data_exfiltration": "Data exfiltration is the unauthorized transfer of data from a compromised system to an external location controlled by the attacker. This step is crucial for attackers to steal sensitive information, such as intellectual property, personally identifiable information (PII), or financial data, for malicious purposes. Here are some common methods and techniques for performing data exfiltration:<br><br>1.  File Transfer Protocols:  Use standard file transfer protocols like FTP, SCP, or SFTP to transfer files from the compromised system to an external server controlled by the attacker.<br><br>MITRE ATT&CK TTP: Exfiltration - T1048<br><br>2.  Web Protocols:  Use HTTP or HTTPS to exfiltrate data by sending it as part of web requests or by uploading files to a web server under the attacker's control.<br><br>MITRE ATT&CK TTP: Exfiltration - T1048<br><br>3.  Email:  Send data as email attachments or embed it within email bodies to exfiltrate it from the compromised system. Attackers may use SMTP or webmail services to send emails.<br><br>MITRE ATT&CK TTP: Exfiltration - T1048<br><br>4.  DNS Tunneling:  Encode data in DNS queries or responses and send them to a DNS server controlled by the attacker. This technique allows data to bypass network security controls.<br><br>MITRE ATT&CK TTP: Exfiltration - T1048<br><br>5.  Covert Channels:  Use covert communication channels, such as steganography or encryption, to hide data within seemingly innocuous files or network traffic.<br><br>MITRE ATT&CK TTP: Exfiltration - T1048<br><br>6.  Cloud Services:  Upload data to cloud storage services like Dropbox, Google Drive, or AWS S3 buckets to exfiltrate it from the compromised system. Attackers may use API access or web interfaces for this purpose.<br><br>MITRE ATT&CK TTP: Exfiltration - T1048<br><br>7.  USB Drives:  Copy data onto USB drives or other removable media and physically remove them from the compromised environment.<br><br>MITRE ATT&CK TTP: Exfiltration - T1025<br><br>8.  Encrypted Channels:  Encrypt data before exfiltrating it and send it over encrypted communication channels, such as VPNs or TLS/SSL connections, to prevent detection.<br><br>MITRE ATT&CK TTP: Exfiltration - T1048<br><br>Performing data exfiltration enables attackers to steal valuable information from compromised systems while evading detection by security controls. It allows attackers to monetize stolen data or use it for further malicious activities.",
	    "covering_tracks": "Covering tracks, also known as anti-forensics or evidence tampering, involves techniques used by attackers to hide or remove evidence of their activities on a compromised system. This step is crucial for attackers to evade detection by forensic investigators and maintain their access to the compromised environment. Here are some common methods and techniques for covering tracks:<br><br>1.  Log Deletion:  Delete or modify log files on the compromised system to remove evidence of unauthorized access or activities. This includes system logs, application logs, and security logs.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.004<br><br>2.  Event Log Clearing:  Clear event logs using built-in Windows utilities like  wevtutil  or PowerShell commands to remove records of system events and user activity.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.004<br><br>3.  Rootkit Installation:  Install rootkits or other stealthy malware that hide their presence from detection mechanisms like antivirus software or endpoint detection and response (EDR) solutions.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.001<br><br>4.  File Deletion:  Delete or overwrite files and directories associated with malicious activities, such as malware executables, configuration files, or tool artifacts.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.004<br><br>5.  History Cleaning:  Clear command history, browser history, and other user activity logs to remove traces of commands executed and websites visited during the compromise.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.004<br><br>6.  Temp File Removal:  Delete temporary files and directories created during the attack to remove artifacts that could be used by investigators to reconstruct the attacker's activities.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.004<br><br>7.  Time Manipulation:  Modify system time and date settings to manipulate the timestamps of files, logs, and other forensic artifacts, making it harder for investigators to establish a timeline of events.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.004<br><br>8.  Registry Modification:  Modify registry keys and values to remove evidence of malicious activity, such as uninstalling malware, deleting registry keys associated with persistence mechanisms, or altering timestamps.<br><br>MITRE ATT&CK TTP: Defense Evasion - T1070.004<br><br>Performing covering tracks techniques allows attackers to conceal their presence on compromised systems and avoid detection by forensic analysis tools and investigators. It enables attackers to maintain access to the compromised environment and continue their malicious activities undetected.",
            "end": "Exiting Exploitation phase. Proceed to Remediation and Documentation phase."
        }
    },
    "4": {
        "name": "Remediation and Documentation",
        "responses": {
            "start": "Welcome to Remediation and Documentation phase. Would you like to prepare a detailed document report?",
            "help": " After completing testing and identifying vulnerabilities, this phase focuses on providing recommendations and remediation steps to mitigate the identified risks. A detailed report documenting findings, impact, and recommendations is prepared for stakeholders and developers. Not sure what to do in this? You can get recommended mitigations to prevent the vulnerabilities in web applications bein tested, generate a report in this phase and finish the pentest!",
	    "show_mitigations": "In order to remove vulnerabilities from this web app and enhance its security posture, several mitigation techniques can be implemented. Firstly, applying vendor patches and updates regularly is crucial to address known vulnerabilities in software components and dependencies specific to this web app. This includes keeping the operating system, web server, application server, database server, and all related libraries and frameworks up to date with the latest security patches and fixes tailored to this application's environment. Additionally, using secure coding practices during the development of this web app helps in preventing common vulnerabilities like SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF) within the context of this application's codebase. Implementing input validation and output encoding techniques specific to the functionalities of this web app can mitigate the risk of injection attacks targeting its unique features. Furthermore, enforcing strong authentication and authorization mechanisms, such as multi-factor authentication (MFA) and role-based access control (RBAC) tailored to this web app's user roles, helps in protecting against unauthorized access. Employing web application firewalls (WAFs) and intrusion detection/prevention systems (IDS/IPS) can add an additional layer of defense by monitoring and filtering incoming traffic for suspicious activities specific to this web app's traffic patterns. Regular security testing and code reviews should be conducted to identify and remediate vulnerabilities specific to this web app's implementation. Lastly, educating developers and users of this web app about security best practices and conducting security awareness training programs tailored to this application's functionalities can help in fostering a security-conscious culture within the organization, ultimately reducing the overall risk exposure of this web app. By adopting a holistic approach to security and implementing these mitigation techniques customized for this web app, organizations can significantly enhance the security posture of this specific application and mitigate potential risks associated with vulnerabilities inherent to its design and implementation.",
            "generate_report": "Generating report...",
            "end": "Exiting Remediation and Documentation phase. Penetration testing complete."
        }
    }
}
